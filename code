#include<iostream>
using namespace std;
const int maxn = 35, inf = 0x3f3f3f;
long long f[maxn][maxn], now, re;
int n, root[maxn][maxn];
void tree(int l, int r) {
	if (l == r) cout << l << " ";
	if (l >= r) return;
	cout << root[l][r] << " ";
	tree(l, root[l][r] - 1);
	tree(root[l][r] + 1, r);
}
int main() {
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> f[i][i];
	for (int i = 1; i <= n + 1; i++) {
		f[i][i - 1] = 1;
	}
	for (int len = 2; len <= n; len++) {
		for (int k = 1; k <= n - len + 1; k++) {
			re = -inf;
			for (int i = k; i <= k + len - 1; i++) {
				now = f[k][i - 1] * f[i + 1][k + len - 1] + f[i][i];
				if (now > re) {
					re = now;
					root[k][k + len - 1] = i;
				}
			}
			f[k][k + len - 1] = re;
		}
	}
	cout << f[1][n] << endl;
	tree(1, n);
}
